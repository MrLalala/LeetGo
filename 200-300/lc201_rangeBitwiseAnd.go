package main

func rangeBitwiseAnd(m int, n int) int {
	if m == 0 || n == 0 {
		return 0
	}
	// 这是在找 n和m 二进制字符串的的最小公共前缀(从左向右)
	// 因为是相与, 所以最小公共前缀之后的位都会被消去
	// 因为在[m,n]之间, 每一次进位都必然会导致最低位的1变成0, 那么在这一位上所有的数字相与之后必然为0
	// 比如[9,15]
	// 9: 1001
	// 10:1010
	// 11:1011
	// 12:1100
	// 13:1101
	// 14:1110
	// 15:1111
	// 可以看到后3位都存在进位, 所以最后的结果必然是 1000
	for n > m {
		// 消去n 最右边的1,
		n &= n - 1
	}

	return n
}
